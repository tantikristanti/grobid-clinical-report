buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }
    dependencies {
        classpath group: 'net.researchgate', name: 'gradle-release', version: '2.8.1'
        classpath 'gradle.plugin.org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.10.1'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.5'
        classpath 'com.github.jengelman.gradle.plugins:shadow:6.0.0'
        classpath 'com.adarshr:gradle-test-logger-plugin:2.0.0'
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
    maven { url "https://dl.bintray.com/rookies/maven" }
    maven { url "http://oss.jfrog.org/artifactory/libs-snapshot" }
    maven { url "http://oss.jfrog.org/artifactory/libs-release" }
    flatDir {
        dirs 'localLibs'
    }
}

apply plugin: 'net.researchgate.release'
apply plugin: 'maven'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'java'
apply plugin: 'war'
apply from: 'https://raw.github.com/gretty-gradle-plugin/gretty/master/pluginScripts/gretty.plugin'

group = "org.grobid"
version = '0.0.1'
description = "grobid-medical-report is a GROBID module for extracting and structuring medical documents (e.g. text, PDF) into structured XML/TEI encoded documents."

sourceCompatibility = 1.8
targetCompatibility = 1.8

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

dependencies {
    compile 'org.slf4j:slf4j-log4j12:1.7.25'

    //Unit tests
    testCompile 'junit:junit:4.12'
    testCompile 'org.easymock:easymock:4.0.2'
    testCompile 'org.hamcrest:hamcrest-all:1.3'
    testCompile group: 'org.easymock', name: 'easymock', version: '3.4'
    testCompile 'org.powermock:powermock-module-junit4:2.0.2'
    testCompile 'org.powermock:powermock-api-easymock:2.0.2'

    //GROBID (.m2/repository/org/grobid/)
    compile 'org.grobid:grobid-core:0.7.0-SNAPSHOT'
    compile 'org.grobid:grobid-trainer:0.7.0-SNAPSHOT'
    compile('org.grobid:grobid-service:0.7.0-SNAPSHOT') {
        transitive = false
    }

    //Apache commons
    compile 'org.apache.commons:commons-collections4:4.1'
    compile 'org.apache.commons:commons-lang3:3.6'
    compile 'commons-logging:commons-logging:1.2'
    compile 'commons-io:commons-io:2.6'
    compile 'commons-pool:commons-pool:1.6'

    //Json
    compile "com.fasterxml.jackson.core:jackson-core:2.10.1"
    compile "com.fasterxml.jackson.core:jackson-databind:2.10.1"
    compile "com.fasterxml.jackson.module:jackson-module-afterburner:2.10.1"

    // XML
    implementation 'org.codehaus.woodstox:stax2-api:3.1.4'
    implementation 'com.fasterxml.woodstox:woodstox-core:5.1.0'

    // Needed for compatibility with JDK > 8
    compile 'javax.activation:activation:1.1.1'

    //Web interface
    compile 'org.glassfish.jersey.media:jersey-media-multipart:2.27'
    compile 'org.glassfish.jersey.inject:jersey-hk2:2.27'
    compile 'org.glassfish.jersey.containers:jersey-container-grizzly2-servlet:2.27'
    compile 'org.glassfish.jersey.containers:jersey-container-servlet-core:2.27'
    compile 'org.glassfish.jersey.core:jersey-client:2.27'
    compile 'javax.ws.rs:javax.ws.rs-api:2.1'

    compile 'javax.servlet:javax.servlet-api:3.1.0'

    compile 'javax.activation:activation:1.1.1'
    compile 'com.google.guava:guava:16.0.1'

    compile 'org.jvnet.mimepull:mimepull:1.6'
    compile 'net.arnx:jsonic:1.3.5'
}

configurations {
    compile.exclude group: "org.slf4j", module: "slf4j-jdk14"
    compile.exclude group: 'org.slf4j', module: "slf4j-log4j12"
    compile.exclude group: 'log4j', module: "log4j"
}

configurations.all {
    resolutionStrategy {
        force 'xml-apis:xml-apis:1.4.01'
    }
}

// Gretty configuration

gretty {
    httpPort = 8080
    contextPath = '/'
    servletContainer = "jetty9.4"
}


test {
    exclude '**/**IntegrationTest**'
}

task integration(type: Test) {
    include '**'
}

// Training configuration

def trainerTasks = [
        //Training models
        "train_medical_report_segmenter"        : "org.grobid.trainer.MedicalReportSegmenterTrainer",
        "train_header_medical_report"           : "org.grobid.trainer.HeaderMedicalReportTrainer",
        "train_left_note_medical_report"        : "org.grobid.trainer.LeftNoteMedicalReportTrainer",
        "train_full_medical_text"               : "org.grobid.trainer.FullMedicalTextTrainer"
]

trainerTasks.each { taskName, mainClassName ->
    tasks.create(name: taskName, type: JavaExec, group: 'training') {
        main = mainClassName
        classpath = sourceSets.main.runtimeClasspath
    }
}

// return the default value if the property has not been specified in command line
ext.getArg = { propName, defaultVal ->
    return project.hasProperty(propName) ? project.getProperty(propName) : defaultVal;
}

// Copy the model
task copyModels(type: Copy) {
    from "${rootDir}/resources/models"
    include "*"
    into "${rootDir}/../grobid-home/models/"
}

// Evaluation
// as running this command: $ ./gradlew eval_medical_report_segmenter -gH /path/to/grobid-home
task eval_medical_report_segmenter(dependsOn: 'classes', type: JavaExec, group: 'training') {
    main = 'org.grobid.trainer.MedicalReportSegmenterTrainerRunner'
    classpath = sourceSets.main.runtimeClasspath
    args 1, 'medical_report_segmenter', '-gH', getArg('gH', '../grobid-home')
    jvmArgs '-Xmx3072m'
}

// as running this command: $ ./gradlew eval_medical_report_segmenter_split -gH /path/to/grobid-home
task eval_medical_report_segmenter_split(dependsOn: 'classes', type: JavaExec, group: 'training') {
    main = 'org.grobid.trainer.MedicalReportSegmenterTrainerRunner'
    classpath = sourceSets.main.runtimeClasspath
    args 2, 'medical_report_segmenter', '-gH', getArg('gH', '../../grobid-home'), '-s', getArg('s', '0.8')
    jvmArgs '-Xmx3072m'
}

// as running this command: $ ./gradlew eval_header_medical_report -gH /path/to/grobid-home
task eval_header_medical_report(dependsOn: 'classes', type: JavaExec, group: 'training') {
    main = 'org.grobid.trainer.HeaderMedicalReportTrainerRunner'
    classpath = sourceSets.main.runtimeClasspath
    args 1, 'header_medical_report', '-gH', getArg('gH', '../grobid-home')
    jvmArgs '-Xmx3072m'
}

// as running this command: $ ./gradlew eval_header_medical_report_split -gH /path/to/grobid-home
task eval_header_medical_report_split(dependsOn: 'classes', type: JavaExec, group: 'training') {
    main = 'org.grobid.trainer.HeaderMedicalReportTrainerRunner'
    classpath = sourceSets.main.runtimeClasspath
    args 2, 'header_medical_report', '-gH', getArg('gH', '../../grobid-home'), '-s', getArg('s', '0.8')
    jvmArgs '-Xmx3072m'
}

// as running this command: $ ./gradlew eval_left_note_medical_report -gH /path/to/grobid-home
task eval_left_note_medical_report(dependsOn: 'classes', type: JavaExec, group: 'training') {
    main = 'org.grobid.trainer.LeftNoteMedicalReportTrainerRunner'
    classpath = sourceSets.main.runtimeClasspath
    args 1, 'left_note_medical_report', '-gH', getArg('gH', '../grobid-home')
    jvmArgs '-Xmx3072m'
}

// as running this command: $ ./gradlew eval_left_note_medical_report_split -gH /path/to/grobid-home
task eval_left_note_medical_report_split(dependsOn: 'classes', type: JavaExec, group: 'training') {
    main = 'org.grobid.trainer.LeftNoteMedicalReportTrainerRunner'
    classpath = sourceSets.main.runtimeClasspath
    args 2, 'left_note_medical_report', '-gH', getArg('gH', '../../grobid-home'), '-s', getArg('s', '0.8')
    jvmArgs '-Xmx3072m'
}

// as running this command: $ ./gradlew eval_full_medical_text -gH /path/to/grobid-home
task eval_full_medical_text(dependsOn: 'classes', type: JavaExec, group: 'training') {
    main = 'org.grobid.trainer.FullMedicalTextTrainerRunner'
    classpath = sourceSets.main.runtimeClasspath
    args 1, 'full_medical_text', '-gH', getArg('gH', '../grobid-home')
    jvmArgs '-Xmx3072m'
}

// as running this command: $ ./gradlew eval_full_medical_text_split -gH /path/to/grobid-home
task eval_full_medical_text_split(dependsOn: 'classes', type: JavaExec, group: 'training') {
    main = 'org.grobid.trainer.FullMedicalTextTrainerRunner'
    classpath = sourceSets.main.runtimeClasspath
    args 2, 'full_medical_text', '-gH', getArg('gH', '../../grobid-home'), '-s', getArg('s', '0.8')
    jvmArgs '-Xmx3072m'
}

// One jar configuration

/*shadowJar {
    classifier = 'onejar'
    zip64 true
    manifest {
        attributes 'Main-Class': 'org.grobid.core.main.batch.MedicalReportMain'
    }
}*/

shadowJar {
    archiveClassifier = 'onejar'
    mergeServiceFiles()
    zip64 true
    manifest {
        attributes 'Main-Class': 'org.grobid.core.main.batch.GrobidMedicalReportMain'
    }
    from sourceSets.main.output
}

artifacts {
    archives shadowJar
//    archives mainJar
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:deprecation"
    options.compilerArgs << "-Xlint:unchecked"
}


wrapper {
    gradleVersion "6.5.1"
}

build.dependsOn project.getSubprojects().collect({ it.getTasks().getByName("build") })