buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }
    dependencies {
        classpath 'gradle.plugin.org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.12.0'
        classpath "gradle.plugin.com.github.jengelman.gradle.plugins:shadow:7.0.0"
        classpath 'com.adarshr:gradle-test-logger-plugin:2.0.0'
    }
}

apply plugin: 'application'
apply plugin: 'java'
apply plugin: 'java-library'
apply plugin: 'maven-publish'
apply plugin: 'com.github.johnrengelman.shadow'

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
    repositories {
        mavenLocal()
    }
}

task install(dependsOn: publishToMavenLocal)

group = "org.grobid"
version = '0.0.1'
description = "grobid-medical-report is a GROBID module for extracting and structuring medical documents (e.g. text, PDF) into structured XML/TEI encoded documents."

sourceCompatibility = 1.8
targetCompatibility = 1.8

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://grobid.s3.eu-west-1.amazonaws.com/repo/" }
    maven {
        url 'lib/'
    }
}

dependencies {
    //Unit tests
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.easymock:easymock:4.3'
    testImplementation 'org.hamcrest:hamcrest-all:1.3'

    testImplementation 'org.powermock:powermock-module-junit4:2.0.9'
    testImplementation 'org.powermock:powermock-api-easymock:2.0.9'
    testImplementation 'xmlunit:xmlunit:1.6'

    // Logging
    implementation group: 'log4j', name: 'log4j', version: '1.2.17'

    // GROBID (.m2/repository/org/grobid/)
    implementation group: 'org.grobid', name: 'grobid-ner', version: '0.7.1'
    implementation ('org.grobid:grobid-trainer:0.7.2-SNAPSHOT') {
        exclude(module: 'slf4j-jdk14')
    }
    implementation ('org.grobid:grobid-core:0.7.2-SNAPSHOT'){
        exclude(module: 'slf4j-jdk14')
    }
    implementation ('org.grobid:grobid-service:0.7.2-SNAPSHOT')

    implementation 'org.slf4j:slf4j-api:1.7.36'
    implementation 'com.googlecode.clearnlp:clearnlp:1.4.2'

    //Apache commons
    implementation 'org.apache.commons:commons-collections4:4.4'
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'commons-logging:commons-logging:1.2'
    implementation 'commons-io:commons-io:2.11.0'
    implementation 'commons-pool:commons-pool:1.6'
    implementation 'org.apache.commons:commons-text:1.9'
    implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.13'
    implementation group: 'org.apache.httpcomponents', name: 'httpmime', version: '4.5.13'
    implementation group: 'org.apache.commons', name: 'commons-text', version: '1.1'
    implementation group: 'com.google.guava', name: 'guava', version: '31.1-jre'

    // json and yaml
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: '2.10.1'
    implementation "com.fasterxml.jackson.core:jackson-core:2.13.2"
    implementation "com.fasterxml.jackson.core:jackson-databind:2.13.2.2"
    implementation "com.fasterxml.jackson.module:jackson-module-afterburner:2.13.2"
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.13.2"
    implementation 'com.fasterxml.woodstox:woodstox-core:6.2.8'

    // Web services
    implementation "io.dropwizard:dropwizard-core:1.3.29"
    implementation "io.dropwizard:dropwizard-assets:1.3.29"
    implementation "com.hubspot.dropwizard:dropwizard-guicier:1.3.5.2"
    implementation "io.dropwizard:dropwizard-testing:1.3.29"
    implementation "io.dropwizard:dropwizard-forms:1.3.29"
    implementation "io.dropwizard:dropwizard-client:1.3.29"
    implementation "io.dropwizard:dropwizard-auth:1.3.29"
    implementation "io.dropwizard.metrics:metrics-core:4.0.5"
    implementation "io.dropwizard.metrics:metrics-servlets:4.0.5"
    implementation "io.prometheus:simpleclient_dropwizard:0.11.0"
    implementation "io.prometheus:simpleclient_servlet:0.11.0"

    testImplementation "io.dropwizard:dropwizard-testing:1.3.17"

    implementation "org.apache.pdfbox:pdfbox:2.0.3"

    implementation "javax.activation:activation:1.1.1"
    implementation 'javax.mail:javax.mail-api:1.6.2'
    implementation 'javax.servlet:javax.servlet-api:4.0.1'

    implementation group: 'net.arnx', name: 'jsonic', version: '1.3.10'

    implementation "com.google.code.gson:gson:2.8.1"
    implementation 'javax.mail:javax.mail-api:1.6.2'
    implementation group: 'javax.activation', name: 'activation', version: '1.1.1'

    //XML
    implementation group: 'com.thoughtworks.xstream', name: 'xstream', version: '1.4.19'
    implementation group: 'org.apache.avro', name: 'avro', version: '1.7.5'
}

configurations {
    implementation.exclude group: "org.slf4j", module: "slf4j-jdk14"
    implementation.exclude group: 'log4j', module: "log4j"
}

configurations.all {
    exclude module: 'slf4j-log4j12'
    resolutionStrategy {
        force 'xml-apis:xml-apis:1.4.01'
    }
}

test {
    testLogging.showStandardStreams = true
    exclude '**/**IntegrationTest**'
}

distTar.enabled = false
distZip.enabled = false

// service
apply plugin: 'application'
apply plugin: 'jacoco'

application {
    mainClassName = 'org.grobid.service.GrobidMedicalReportServiceApplication'
    tasks.run.workingDir = rootProject.rootDir

    run {
        args = ['server', 'resources/config/grobid-medical-service.yaml']
    }
}

wrapper {
    gradleVersion "7.1.1"
}

// return the default value if the property has not been specified in command line
ext.getArg = { propName, defaultVal ->
    return project.hasProperty(propName) ? project.getProperty(propName) : defaultVal;
}

/*To run these tasks,
- put all the models should be under grobid/grobid-home/models
- add the definition or names of the models in the grobid/grobid-core/src/main/java/org/grobid/core/GrobidModels.java
/ */
/** Training configuration **/
def trainerTasks = [
    //Training models
    "train_medical_report_segmenter"        : "org.grobid.trainer.MedicalReportSegmenterTrainer",
    "train_header_medical_report"           : "org.grobid.trainer.HeaderMedicalReportTrainer",
    "train_left_note_medical_report"        : "org.grobid.trainer.LeftNoteTrainer",
    "train_full_medical_text"               : "org.grobid.trainer.FullMedicalTextTrainer",
    "train_french_medical_ner"              : "org.grobid.trainer.FrenchMedicalNERTrainer",
    "train_dateline"                        : "org.grobid.trainer.DatelineTrainer",
    "train_patient"                         : "org.grobid.trainer.PatientTrainer",
    "train_medic"                           : "org.grobid.trainer.MedicTrainer",
    "train_organization"                    : "org.grobid.trainer.OrganizationTrainer",
    "train_address"                         : "org.grobid.trainer.AddressTrainer",
    "train_name_person_medical"             : "org.grobid.trainer.PersonNameMedicalTrainer"
]

trainerTasks.each { taskName, mainClassName ->
    tasks.create(name: taskName, type: JavaExec, group: 'training') {
        mainClass = mainClassName
        classpath = sourceSets.main.runtimeClasspath
    }
}

// return the default value if the property has not been specified in command line
ext.getArg = { propName, defaultVal ->
    return project.hasProperty(propName) ? project.getProperty(propName) : defaultVal
}

// Evaluation
// as running this command: $ ./gradlew eval_medical_report_segmenter -gH /path/to/grobid-home
task eval_medical_report_segmenter(dependsOn: 'classes', type: JavaExec, group: 'training') {
    mainClass = 'org.grobid.trainer.MedicalReportTrainerRunner'
    classpath = sourceSets.main.runtimeClasspath
    args 1, 'medical-report-segmenter', '-gH', getArg('gH', '../grobid-home')
    jvmArgs '-Xmx3072m'
}

// as running this command: $ ./gradlew train_medical_report_segmenter_split -gH /path/to/grobid-home -s [training:test]
task train_medical_report_segmenter_split(dependsOn: 'classes', type: JavaExec, group: 'training') {
    mainClass = 'org.grobid.trainer.MedicalReportTrainerRunner'
    classpath = sourceSets.main.runtimeClasspath
    args 2, 'medical-report-segmenter', '-gH', getArg('gH', '../grobid-home'), '-s', getArg('s', '0.8')
    jvmArgs '-Xmx3072m'
}

// as running this command: $ ./gradlew eval_header_medical_report -gH /path/to/grobid-home
task eval_header_medical_report(dependsOn: 'classes', type: JavaExec, group: 'training') {
    mainClass = 'org.grobid.trainer.MedicalReportTrainerRunner'
    classpath = sourceSets.main.runtimeClasspath
    args 1, 'header-medical-report', '-gH', getArg('gH', '../grobid-home')
    jvmArgs '-Xmx3072m'
}

// as running this command: $ ./gradlew train_header_medical_report_split -gH /path/to/grobid-home -s [training:test]
task train_header_medical_report_split(dependsOn: 'classes', type: JavaExec, group: 'training') {
    mainClass = 'org.grobid.trainer.MedicalReportTrainerRunner'
    classpath = sourceSets.main.runtimeClasspath
    args 2, 'header-medical-report', '-gH', getArg('gH', '../grobid-home'), '-s', getArg('s', '0.8')
    jvmArgs '-Xmx3072m'
}

// as running this command: $ ./gradlew eval_left_note_medical_report -gH /path/to/grobid-home
task eval_left_note_medical_report(dependsOn: 'classes', type: JavaExec, group: 'training') {
    mainClass = 'org.grobid.trainer.MedicalReportTrainerRunner'
    classpath = sourceSets.main.runtimeClasspath
    args 1, 'left-note-medical-report', '-gH', getArg('gH', '../grobid-home')
    jvmArgs '-Xmx3072m'
}

// as running this command: $ ./gradlew train_left_note_medical_report_split -gH /path/to/grobid-home -s [training:test]
task train_left_note_medical_report_split(dependsOn: 'classes', type: JavaExec, group: 'training') {
    mainClass = 'org.grobid.trainer.MedicalReportTrainerRunner'
    classpath = sourceSets.main.runtimeClasspath
    args 2, 'left-note-medical-report', '-gH', getArg('gH', '../grobid-home'), '-s', getArg('s', '0.8')
    jvmArgs '-Xmx3072m'
}

// as running this command: $ ./gradlew eval_full_medical_text -gH /path/to/grobid-home
task eval_full_medical_text(dependsOn: 'classes', type: JavaExec, group: 'training') {
    mainClass = 'org.grobid.trainer.MedicalReportTrainerRunner'
    classpath = sourceSets.main.runtimeClasspath
    args 1, 'full-medical-text', '-gH', getArg('gH', '../grobid-home')
    jvmArgs '-Xmx3072m'
}

// as running this command: $ ./gradlew train_full_medical_text_split -gH /path/to/grobid-home -s [training:test]
task train_full_medical_text_split(dependsOn: 'classes', type: JavaExec, group: 'training') {
    mainClass = 'org.grobid.trainer.MedicalReportTrainerRunner'
    classpath = sourceSets.main.runtimeClasspath
    args 2, 'full-medical-text', '-gH', getArg('gH', '../grobid-home'), '-s', getArg('s', '0.8')
    jvmArgs '-Xmx3072m'
}

// as running this command: $ ./gradlew eval_dateline -gH /path/to/grobid-home
task eval_dateline(dependsOn: 'classes', type: JavaExec, group: 'training') {
    mainClass = 'org.grobid.trainer.MedicalReportTrainerRunner'
    classpath = sourceSets.main.runtimeClasspath
    args 1, 'dateline', '-gH', getArg('gH', '../grobid-home')
    jvmArgs '-Xmx3072m'
}

// as running this command: $ ./gradlew train_dateline_split -gH /path/to/grobid-home -s [training:test]
task train_dateline_split(dependsOn: 'classes', type: JavaExec, group: 'training') {
    mainClass = 'org.grobid.trainer.MedicalReportTrainerRunner'
    classpath = sourceSets.main.runtimeClasspath
    args 2, 'dateline', '-gH', getArg('gH', '../grobid-home'), '-s', getArg('s', '0.8')
    jvmArgs '-Xmx3072m'
}

// as running this command: $ ./gradlew eval_medic -gH /path/to/grobid-home
task eval_medic(dependsOn: 'classes', type: JavaExec, group: 'training') {
    mainClass = 'org.grobid.trainer.MedicalReportTrainerRunner'
    classpath = sourceSets.main.runtimeClasspath
    args 1, 'medic', '-gH', getArg('gH', '../grobid-home')
    jvmArgs '-Xmx3072m'
}

// as running this command: $ ./gradlew train_medic_split -gH /path/to/grobid-home -s [training:test]
task train_medic_split(dependsOn: 'classes', type: JavaExec, group: 'training') {
    mainClass = 'org.grobid.trainer.MedicalReportTrainerRunner'
    classpath = sourceSets.main.runtimeClasspath
    args 2, 'medic', '-gH', getArg('gH', '../grobid-home'), '-s', getArg('s', '0.8')
    jvmArgs '-Xmx3072m'
}

// as running this command: $ ./gradlew eval_patient -gH /path/to/grobid-home
task eval_patient(dependsOn: 'classes', type: JavaExec, group: 'training') {
    mainClass = 'org.grobid.trainer.MedicalReportTrainerRunner'
    classpath = sourceSets.main.runtimeClasspath
    args 1, 'patient', '-gH', getArg('gH', '../grobid-home')
    jvmArgs '-Xmx3072m'
}

// as running this command: $ ./gradlew train_patient_split -gH /path/to/grobid-home -s [training:test]
task train_patient_split(dependsOn: 'classes', type: JavaExec, group: 'training') {
    mainClass = 'org.grobid.trainer.MedicalReportTrainerRunner'
    classpath = sourceSets.main.runtimeClasspath
    args 2, 'patient', '-gH', getArg('gH', '../grobid-home'), '-s', getArg('s', '0.8')
    jvmArgs '-Xmx3072m'
}

// as running this command: $ ./gradlew eval_organization -gH /path/to/grobid-home
task eval_organization(dependsOn: 'classes', type: JavaExec, group: 'training') {
    mainClass = 'org.grobid.trainer.MedicalReportTrainerRunner'
    classpath = sourceSets.main.runtimeClasspath
    args 1, 'organization', '-gH', getArg('gH', '../grobid-home')
    jvmArgs '-Xmx3072m'
}

// as running this command: $ ./gradlew train_organization_split -gH /path/to/grobid-home -s [training:test]
task train_organization_split(dependsOn: 'classes', type: JavaExec, group: 'training') {
    mainClass = 'org.grobid.trainer.MedicalReportTrainerRunner'
    classpath = sourceSets.main.runtimeClasspath
    args 2, 'organization', '-gH', getArg('gH', '../grobid-home'), '-s', getArg('s', '0.8')
    jvmArgs '-Xmx3072m'
}

// as running this command: $ ./gradlew eval_address -gH /path/to/grobid-home
task eval_address(dependsOn: 'classes', type: JavaExec, group: 'training') {
    mainClass = 'org.grobid.trainer.MedicalReportTrainerRunner'
    classpath = sourceSets.main.runtimeClasspath
    args 1, 'address', '-gH', getArg('gH', '../grobid-home')
    jvmArgs '-Xmx3072m'
}

// as running this command: $ ./gradlew train_address_split -gH /path/to/grobid-home -s [training:test]
task train_address_split(dependsOn: 'classes', type: JavaExec, group: 'training') {
    mainClass = 'org.grobid.trainer.MedicalReportTrainerRunner'
    classpath = sourceSets.main.runtimeClasspath
    args 2, 'address', '-gH', getArg('gH', '../grobid-home'), '-s', getArg('s', '0.8')
    jvmArgs '-Xmx3072m'
}

// as running this command: $ ./gradlew eval_name_person_medical -gH /path/to/grobid-home
task eval_name_person_medical(dependsOn: 'classes', type: JavaExec, group: 'training') {
    mainClass = 'org.grobid.trainer.MedicalReportTrainerRunner'
    classpath = sourceSets.main.runtimeClasspath
    args 1, 'name-person-medical', '-gH', getArg('gH', '../grobid-home')
    jvmArgs '-Xmx3072m'
}

// as running this command: $ ./gradlew train_name_person_medical_split -gH /path/to/grobid-home -s [training:test]
task train_name_person_medical_split(dependsOn: 'classes', type: JavaExec, group: 'training') {
    mainClass = 'org.grobid.trainer.MedicalReportTrainerRunner'
    classpath = sourceSets.main.runtimeClasspath
    args 2, 'name-person-medical', '-gH', getArg('gH', '../grobid-home'), '-s', getArg('s', '0.8')
    jvmArgs '-Xmx3072m'
}

// as running this command: $ ./gradlew eval_french_medical_ner -gH /path/to/grobid-home
task eval_french_medical_ner(dependsOn: 'classes', type: JavaExec, group: 'training') {
    mainClass = 'org.grobid.trainer.MedicalReportTrainerRunner'
    classpath = sourceSets.main.runtimeClasspath
    args 1, 'fr-medical-ner', '-gH', getArg('gH', '../grobid-home')
    jvmArgs '-Xmx3072m'
}

// as running this command: $ ./gradlew train_french_medical_ner_split -gH /path/to/grobid-home -s [training:test]
// $ ./gradlew train_french_medical_ner_split -gH ../grobid-home/ -s 0.9
task train_french_medical_ner_split(dependsOn: 'classes', type: JavaExec, group: 'training') {
    mainClass = 'org.grobid.trainer.MedicalReportTrainerRunner'
    classpath = sourceSets.main.runtimeClasspath
    args 2, 'fr-medical-ner', '-gH', getArg('gH', '../grobid-home'), '-s', getArg('s', '0.8')
    jvmArgs '-Xmx3072m'
}


jar {
    from {
        project.configurations.runtimeClasspath.collect {
            //it.isDirectory() ? [] : localLibs.contains(it.getName()) ? zipTree(it) : []
        }
    }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

shadowJar {
    archiveClassifier = 'onejar'
    mergeServiceFiles()
    zip64 true
    manifest {
        attributes 'Main-Class': 'org.grobid.core.main.batch.GrobidMedicalReportMain'
    }
    from sourceSets.main.output

    from {
        project.configurations.runtimeClasspath.collect {
            //it.isDirectory() ? [] : localLibs.contains(it.getName()) ? zipTree(it) : []
        }
    }
}

artifacts {
    archives shadowJar
    archives jar
}

processResources {
    filesMatching('grobid-medical-version.txt') {
        filter {
            it.replace('project.version', project.property('version'))
        }
    }
}

build.dependsOn project.getSubprojects().collect({ it.getTasks().getByName("build") })